name: Reusable Build and Push
on:
  workflow_dispatch:
    inputs:
      image_flavors:
        description: "JSON string of flavors to build, '[main, nvidia-open]'"
        default: "['main', 'nvidia-open']"
        type: string
      brand_name:
        description: "The Brand Name: silverblue"
        required: true
        default: "['cosmic', 'cosmic-dx']"
        type: string
      fedora_version:
        description: "The Fedora Version: 42"
        required: true
        default: 42
        type: number
  workflow_call:
    inputs:
      image_flavors:
        description: "JSON string of flavors to build, '[main, nvidia-open]'"
        default: "['main', 'nvidia-open']"
        type: string
      brand_name:
        description: "The Brand Name: silverblue"
        required: true
        default: "['silverblue', 'silverblue-dx']"
        type: string
      fedora_version:
        description: "The Fedora Version: 42"
        required: true
        default: 42
        type: number

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.brand_name}}-${{ inputs.fedora_version }}
  cancel-in-progress: true

jobs:
  build_container:
    name: image
    runs-on: ubuntu-24.04
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        image_flavor: ${{ fromJson(inputs.image_flavors) }}
        base_name: ${{ fromJson(inputs.brand_name) }}
        fedora_version: ["${{ inputs.fedora_version }}"]
    env:
      BASE_IMAGE_NAME: 'cosmic-atomic'
      IMAGE_NAME: ${{ matrix.base_name }}${{ matrix.image_flavor != 'main' && format('-{0}', matrix.image_flavor) || '' }}
      FEDORA_VERSION: ${{ matrix.fedora_version }}
      DEFAULT_TAG: ${{ matrix.fedora_version }}
      TARGET: ${{ contains(matrix.base_name, 'dx') && 'dx' || 'base' }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Retrieve Signing Key
        shell: bash
        run: |
          if [[ "${{ github.event_name }}"  == 'pull_request' ]]; then
            echo "This should not have run... exiting..."
            exit 1
          else
            echo "${{ secrets.PRIVATE_KEY_20250405 }}" > certs/private_key.priv
            # DEBUG: get character count of key
            wc -c certs/private_key.priv
          fi

      - name: Set up build variables
        shell: bash
        run: |
          KERNEL=$(skopeo inspect --retry-times 3 docker://quay.io/fedora-ostree-desktops/${{ env.BASE_IMAGE_NAME }}:${{ env.DEFAULT_TAG }} | jq -r '.Labels["ostree.linux"]')
          echo "KERNEL=${KERNEL}" >> $GITHUB_ENV

          echo "VERSION=${{ env.DEFAULT_TAG }}.$(date +%Y%m%d)" >> $GITHUB_ENV
          echo "CREATED_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
          echo "DATE=$(date +%Y%m%d)" >> $GITHUB_ENV

      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e # v9
        with:
          remove-codeql: true

      - name: Build Image
        id: build-image
        shell: bash
        run: |
          podman build \
          --build-arg BASE_IMAGE_NAME=${{ env.BASE_IMAGE_NAME }} \
          --build-arg FEDORA_VERSION=${{ env.FEDORA_VERSION }} \
          --build-arg IMAGE_NAME=${{ env.IMAGE_NAME }} \
          --build-arg IMAGE_VENDOR=${{ github.repository_owner }} \
          --build-arg KERNEL=${{ env.KERNEL }} \
          --build-arg VERSION=${{ env.VERSION }} \
          --label org.opencontainers.image.title=${{ env.IMAGE_NAME }} \
          --label org.opencontainers.image.version=${{ env.VERSION }} \
          --label ostree.linux=${{ env.KERNEL }} \
          --label io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/refs/heads/main/README.md \
          --label 'io.artifacthub.package.logo-url=https://avatars.githubusercontent.com/u/120078124?s=200&v=4' \
          --label 'org.opencontainers.image.description=An interpretation of the Ubuntu spirit built on Fedora technology' \
          --label containers.bootc=1 \
          --label org.opencontainers.image.created=${{ env.CREATED_DATE }} \
          --label org.opencontainers.image.source=https://raw.githubusercontent.com/${{ github.repository }}/refs/heads/main/Containerfile \
          --label org.opencontainers.image.url=https://github.com/${{ github.repository }} \
          --label org.opencontainers.image.vendor=${{ github.repository_owner }} \
          --label io.artifacthub.package.deprecated=false \
          --label io.artifacthub.package.keywords=bootc,fedora,${{ env.BASE_IMAGE_NAME }} \
          --label 'io.artifacthub.package.maintainers=[{"name": "${{ github.repository_owner }}", "email": "t.rohan1903@gmail.com"}]' \
          --target ${{ env.TARGET }} \
          --tag localhost/${{ env.IMAGE_NAME }}:${{ env.DEFAULT_TAG }} \
          --file Containerfile .

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          BUILD_TAGS=()
          BUILD_TAGS+=("${{ env.DEFAULT_TAG }}" "${{ env.VERSION }}" "${{ env.DEFAULT_TAG}}-${{ env.DATE }}")
          echo "Tags for this Action..."
          echo "${BUILD_TAGS[@]}"
          echo "BUILD_TAGS=${BUILD_TAGS[*]}" >> $GITHUB_OUTPUT

      - name: Tag Images
        shell: bash
        run: |
          # Get the local image ID
          IMAGE=$(podman inspect localhost/${{ env.IMAGE_NAME }}:${{ matrix.fedora_version }} | jq -r .[].Id)
          podman untag localhost/${{ env.IMAGE_NAME }}:${{ matrix.fedora_version }}

          # Tag Image
          for tag in ${{ steps.generate-tags.outputs.BUILD_TAGS }}; do
            podman tag "$IMAGE" "localhost/${{ env.IMAGE_NAME }}:${tag}"
          done

          # Show Images
          podman images

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@d0603cd0a7dd490be678164909f65c7737470a7f # v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | podman login ghcr.io -u ${{ github.actor }} --password-stdin
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push to GHCR
        id: push
        if: github.event_name != 'pull_request'
        uses: Wandalen/wretry.action@e68c23e6309f2871ca8ae4763e7629b9c258e1ea # v3.8.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            set -euox pipefail

            for tag in ${{ steps.generate-tags.outputs.BUILD_TAGS }}; do
              podman push ${{ env.IMAGE_NAME }}:${tag} ${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}:${tag}
            done

            digest=$(skopeo inspect docker://${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}:${{ env.DEFAULT_TAG }} --format '{{.Digest}}')

            echo "digest=${digest}" >> $GITHUB_OUTPUT

      - name: Install Cosign
        uses: sigstore/cosign-installer@d7d6bc7722e3daa8354c50bcb52f4837da5e9b6a # v3.8.1
        if: github.event_name != 'pull_request'

      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.outputs && fromJSON(steps.push.outputs.outputs).digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Generate file containing outputs
        if: github.event_name != 'pull_request'
        env:
          DIGEST: ${{ steps.push.outputs.outputs && fromJSON(steps.push.outputs.outputs).digest }}
          IMAGE_REGISTRY: ${{ github.repository }}/${{ env.IMAGE_NAME }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          FEDORA_VERSION: ${{ matrix.fedora_version }}
        run: echo "${IMAGE_REGISTRY}@${DIGEST}" > "${IMAGE_NAME}-${FEDORA_VERSION}.txt"

      - name: Upload artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4
        with:
          name: image-${{ env.IMAGE_NAME }}-${{ matrix.fedora_version }}
          retention-days: 1
          if-no-files-found: error
          path: |
            ${{ env.IMAGE_NAME }}-${{ matrix.fedora_version }}.txt

  check:
    name: Check all ${{ inputs.fedora_version }} builds successful
    if: always()
    runs-on: ubuntu-latest
    needs: [build_container]
    steps:
      - name: Check Jobs
        env:
          JOBS: ${{ toJson(needs) }}
        run: |
          echo "Job status:"
          echo $JOBS | jq -r 'to_entries[] | " - \(.key): \(.value.result)"'

          for i in $(echo $JOBS | jq -r 'to_entries[] | .value.result'); do
            if [ "$i" != "success" ] && [ "$i" != "skipped" ]; then
              echo ""
              echo "Status check not okay!"
              exit 1
            fi
          done
